# -*- coding: utf-8 -*-
"""2_PROGRAM UAS STATKOM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJPvzmN7IFJLJeYO35S9DqTo1L71HEjO

klasifikasi status gizi balita menggunakan naive bayes dan k-nearest neighbor berbasis web | 47
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/gdrive')
df = pd.read_excel('/content/gdrive/My Drive/UAS STATKOM/gd_naive bayes - Copy.xlsx')
df

usia = df['Usia (Bulan)']
jenisKelamin = df['Jenis Kelamin (JK)']
beratBadan = df['Berat Badan (BB)']
tinggiBadan = df['Tinggi Badan (TB)']
pendapatanOrangTua = df['Pendapatan Orang Tua']
pendidikanIbu = df['Pendidikan Ibu']
statusGizi = df['Status Gizi']

"""# **Data Distribusi**
## Data Training 70% | Data testing 30%

# Data Kelas Buruk
"""

statusGizi_buruk = df[statusGizi == 'Buruk']
print(len(statusGizi_buruk))
statusGizi_buruk

# Menenentukan index ke berapa data akan dipotong
index_potong_buruk = int(len(statusGizi_buruk) * 0.71)
index_potong_buruk

data_training_buruk = statusGizi_buruk.iloc[:index_potong_buruk]
data_testing_buruk = statusGizi_buruk.iloc[index_potong_buruk:]
print("Banyak Data Training Buruk : ")
print(len(data_training_buruk))
print("Banyak Data Testing Buruk :")
print(len(data_testing_buruk))
print(data_training_buruk)
print()
print(data_testing_buruk)

"""# Data Kelas Baik"""

statusGizi_baik = df[statusGizi == 'Baik']
print(len(statusGizi_baik))
statusGizi_baik

# Menenentukan index ke berapa data akan dipotong
index_potong_baik = int(len(statusGizi_baik) * 0.7)
index_potong_baik

data_training_baik = statusGizi_baik.iloc[:index_potong_baik]
data_testing_baik = statusGizi_baik.iloc[index_potong_baik:]
print("Banyak Data Training Baik : ")
print(len(data_training_baik))
print("Banyak Data Testing Baik : ")
print(len(data_testing_baik))
print(data_training_baik)
print()
print(data_testing_baik)

"""# Menggabungkan Data Training

"""

join_training = pd.concat([data_training_buruk, data_training_baik])
data_training = join_training.sample(frac=1) #fungsi acak baris
print(len(data_training))
data_training

"""# Menggabungkan Data Testing"""

join_testing = pd.concat([data_testing_buruk, data_testing_baik])
data_testing = join_testing.sample(frac=1) #fungsi acak baris
print(len(data_testing))
data_testing

"""# Probabilitas

# Probabilitas Kelas
"""

print('Banyak data buruk : ', len(data_training_buruk))
print('Banyak data baik :', len(data_training_baik))
prob_buruk = len(data_training_buruk)/len(data_training)
prob_baik = len(data_training_baik)/len(data_training)

print(f"{prob_buruk:.2%}")
print(f"{prob_baik:.2%}")

"""## Kolom Usia (Bulan)"""

#Buruk
banyak_bayiDanBalita_buruk = len(data_training[(data_training['Usia (Bulan)']=='Bayi dan Balita') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak Bayi dan Balita Pada Buruk Data Training : ", banyak_bayiDanBalita_buruk)
banyak_anakPraSekolah_buruk = len(data_training[(data_training['Usia (Bulan)']=='Anak Pra-Sekolah') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak Anak Pra Sekolah Pada Buruk Data Training : ", banyak_anakPraSekolah_buruk)

#Baik
banyak_bayiDanBalita_baik = len(data_training[(data_training['Usia (Bulan)']=='Bayi dan Balita') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak Bayi dan Balita Pada Baik Data Training : ", banyak_bayiDanBalita_baik)
banyak_anakPraSekolah_baik = len(data_training[(data_training['Usia (Bulan)']=='Anak Pra-Sekolah') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak Anak Pra Sekolah Pada Baik Data Training : ", banyak_anakPraSekolah_baik)


#Probabilitas
prob_bayiDanBalita_buruk = banyak_bayiDanBalita_buruk/len(data_training_buruk)
prob_anakPraSekolah_buruk = banyak_anakPraSekolah_buruk/len(data_training_buruk)

prob_bayiDanBalita_baik = banyak_bayiDanBalita_baik/len(data_training_baik)
prob_anakPraSekolah_baik = banyak_anakPraSekolah_baik/len(data_training_baik)

print(f"Probabilitas Bayi dan Balita Buruk: {prob_bayiDanBalita_buruk:.2f}")
print(f"Probabilitas Anak PraSekolah Buruk: {prob_anakPraSekolah_buruk:.2f}")
print(" ")

print(f"Probabilitas Bayi dan Balita baik: {prob_bayiDanBalita_baik:.2f}")
print(f"Probabilitas Anak Pra-Sekolah Baik: {prob_anakPraSekolah_baik:.2f}")
print(" ")


data = {
    'Usia (Bulan)': ['Bayi dan Balita', 'Anak PraSekolah'],
    'Buruk': [banyak_bayiDanBalita_buruk, banyak_anakPraSekolah_buruk],
    'Baik': [banyak_bayiDanBalita_baik, banyak_anakPraSekolah_baik],
    'Prob Buruk': [prob_bayiDanBalita_buruk, prob_anakPraSekolah_buruk],
    'Prob Baik': [prob_bayiDanBalita_baik, prob_anakPraSekolah_baik]
}

usia = pd.DataFrame(data)
usia

"""## Jenis Kelamin (JK)"""

#Buruk
banyak_l_buruk = len(data_training[(data_training['Jenis Kelamin (JK)']=='L') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak L Pada Buruk Data Training : ", banyak_l_buruk)
banyak_p_buruk = len(data_training[(data_training['Jenis Kelamin (JK)']=='P') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak P Pada Buruk Data Training : ", banyak_p_buruk)

#Baik
banyak_l_baik = len(data_training[(data_training['Jenis Kelamin (JK)']=='L') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak L Pada Baik Data Training : ", banyak_l_baik)
banyak_p_baik = len(data_training[(data_training['Jenis Kelamin (JK)']=='P') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak P Pada Baik Data Training : ", banyak_p_baik)


#Probabilitas
prob_l_buruk = banyak_l_buruk/len(data_training_buruk)
prob_p_buruk = banyak_p_buruk/len(data_training_buruk)

prob_l_baik = banyak_l_baik/len(data_training_baik)
prob_p_baik = banyak_p_baik/len(data_training_baik)

print(f"Probabilitas Laki-Laki Buruk: {prob_l_buruk:.2f}")
print(f"Probabilitas Perempuan Buruk: {prob_p_buruk:.2f}")
print(" ")

print(f"Probabilitas Laki-Laki Baik: {prob_l_baik:.2f}")
print(f"Probabilitas Perempuan Baik: {prob_p_baik:.2f}")
print(" ")


data = {
    'Jenis Kelamin (JK)': ['L', 'P'],
    'Buruk': [banyak_l_buruk, banyak_p_buruk],
    'Baik': [banyak_l_baik, banyak_p_baik],
    'Prob Buruk': [prob_l_buruk, prob_p_buruk],
    'Prob Baik': [prob_l_baik, prob_p_baik]
}

jenisKelamin = pd.DataFrame(data)
jenisKelamin

"""## Berat Badan (BB)"""

#Buruk
banyak_ringan_buruk = len(data_training[(data_training['Berat Badan (BB)']=='Ringan') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak Ringan Pada Buruk Data Training : ", banyak_ringan_buruk)
banyak_normal_buruk = len(data_training[(data_training['Berat Badan (BB)']=='Normal') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak Normal Pada Buruk Data Training : ", banyak_normal_buruk)

#Baik
banyak_ringan_baik = len(data_training[(data_training['Berat Badan (BB)']=='Ringan') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak Ringan Pada Baik Data Training : ", banyak_ringan_baik)
banyak_normal_baik = len(data_training[(data_training['Berat Badan (BB)']=='Normal') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak Normal Pada Baik Data Training : ", banyak_normal_baik)


#Probabilitas
prob_ringan_buruk = banyak_ringan_buruk/len(data_training_buruk)
prob_normal_buruk = banyak_normal_buruk/len(data_training_buruk)

prob_ringan_baik = banyak_ringan_baik/len(data_training_baik)
prob_normal_baik = banyak_normal_baik/len(data_training_baik)

print(f"Probabilitas Ringan Buruk: {prob_ringan_buruk:.2f}")
print(f"Probabilitas Normal  Buruk: {prob_normal_buruk:.2f}")
print(" ")

print(f"Probabilitas Ringan Baik: {prob_ringan_baik:.2f}")
print(f"Probabilitas Normal Baik: {prob_normal_baik:.2f}")
print(" ")


data = {
    'Berat Badan (BB)': ['Ringan', 'Normal'],
    'Buruk': [banyak_ringan_buruk, banyak_normal_buruk],
    'Baik': [banyak_ringan_baik, banyak_normal_baik],
    'Prob Buruk': [prob_ringan_buruk, prob_normal_buruk],
    'Prob Baik': [prob_ringan_baik, prob_normal_baik]
}

beratBadan = pd.DataFrame(data)
beratBadan

"""## Tinggi Badan (TB)"""

#Buruk
banyak_pendek_buruk = len(data_training[(data_training['Tinggi Badan (TB)']=='Pendek') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak Pendek Pada Buruk Data Training : ", banyak_pendek_buruk)
banyak_tinggi_buruk = len(data_training[(data_training['Tinggi Badan (TB)']=='Tinggi') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak Tinggi Pada Buruk Data Training : ", banyak_tinggi_buruk)

#Baik
banyak_pendek_baik = len(data_training[(data_training['Tinggi Badan (TB)']=='Pendek') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak Pendek Pada Baik Data Training : ", banyak_pendek_baik)
banyak_tinggi_baik = len(data_training[(data_training['Tinggi Badan (TB)']=='Tinggi') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak Tinggi Pada Baik Data Training : ", banyak_tinggi_baik)


#Probabilitas
prob_pendek_buruk = banyak_pendek_buruk/len(data_training_buruk)
prob_tinggi_buruk = banyak_tinggi_buruk/len(data_training_buruk)

prob_pendek_baik = banyak_pendek_baik/len(data_training_baik)
prob_tinggi_baik = banyak_tinggi_baik/len(data_training_baik)

print(f"Probabilitas Pendek Buruk: {prob_pendek_buruk:.2f}")
print(f"Probabilitas Tinggi Buruk: {prob_tinggi_buruk:.2f}")
print(" ")

print(f"Probabilitas Pendek Baik: {prob_pendek_baik:.2f}")
print(f"Probabilitas Tinggi Baik: {prob_tinggi_baik:.2f}")
print(" ")


data = {
    'Tinggi Badan (TB)': ['Pendek', 'Tinggi'],
    'Buruk': [banyak_pendek_buruk, banyak_tinggi_buruk],
    'Baik': [banyak_pendek_baik, banyak_tinggi_baik],
    'Prob Buruk': [prob_pendek_buruk, prob_tinggi_buruk],
    'Prob Baik': [prob_pendek_baik, prob_tinggi_baik]
}

tinggiBadan = pd.DataFrame(data)
tinggiBadan

"""## Pendapatan Orang Tua"""

#Buruk
banyak_1_buruk = len(data_training[(data_training['Pendapatan Orang Tua']=='Satu') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak 1 Pada Buruk Data Training : ", banyak_1_buruk)
banyak_2_buruk = len(data_training[(data_training['Pendapatan Orang Tua']=='Dua') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak 2 Pada Buruk Data Training : ", banyak_2_buruk)
banyak_3_buruk = len(data_training[(data_training['Pendapatan Orang Tua']=='Tiga') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak 3 Pada Buruk Data Training : ", banyak_3_buruk)

#Baik
banyak_1_baik = len(data_training[(data_training['Pendapatan Orang Tua']=='Satu') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak 1 Pada Baik Data Training : ", banyak_1_baik)
banyak_2_baik = len(data_training[(data_training['Pendapatan Orang Tua']=='Dua') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak 2 Pada Baik Data Training : ", banyak_2_baik)
banyak_3_baik = len(data_training[(data_training['Pendapatan Orang Tua']=='Tiga') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak 3 Pada Baik Data Training : ", banyak_3_baik)

#Probabilitas
prob_1_buruk = banyak_1_buruk/len(data_training_buruk)
prob_2_buruk = banyak_2_buruk/len(data_training_buruk)
prob_3_buruk = banyak_3_buruk/len(data_training_buruk)

prob_1_baik = banyak_1_baik/len(data_training_baik)
prob_2_baik = banyak_2_baik/len(data_training_baik)
prob_3_baik = banyak_3_baik/len(data_training_baik)

print(f"Probabilitas 1 Buruk: {prob_1_buruk:.2f}")
print(f"Probabilitas 2 Buruk: {prob_2_buruk:.2f}")
print(f"Probabilitas 3 Buruk: {prob_3_buruk:.2f}")
print(" ")

print(f"Probabilitas 1 Baik: {prob_1_baik:.2f}")
print(f"Probabilitas 2 Baik: {prob_2_baik:.2f}")
print(f"Probabilitas 3 Baik: {prob_3_baik:.2f}")
print(" ")


data = {
    'Pendapatan Orang Tua': ['1', '2', '3'],
    'Buruk': [banyak_1_buruk, banyak_2_buruk, banyak_3_buruk],
    'Baik': [banyak_1_baik, banyak_2_baik, banyak_3_baik],
    'Prob Buruk': [prob_1_buruk, prob_2_buruk, prob_3_buruk],
    'Prob Baik': [prob_1_baik, prob_2_baik, prob_3_baik]
}

pendapatanOrangTua = pd.DataFrame(data)
pendapatanOrangTua

"""## Pendidikan Ibu"""

#Buruk
banyak_sd_buruk = len(data_training[(data_training['Pendidikan Ibu']=='SD') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak SD Pada Buruk Data Training : ", banyak_sd_buruk)
banyak_smp_buruk = len(data_training[(data_training['Pendidikan Ibu']=='SMP') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak SMP Pada Buruk Data Training : ", banyak_smp_buruk)
banyak_sma_buruk = len(data_training[(data_training['Pendidikan Ibu']=='SMA') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak SMA Pada Buruk Data Training : ", banyak_sma_buruk)
banyak_s1_buruk = len(data_training[(data_training['Pendidikan Ibu']=='S1') & (data_training['Status Gizi'] == 'Buruk')])
print("Banyak S1 Pada Buruk Data Training : ", banyak_s1_buruk)

#Baik
banyak_sd_baik = len(data_training[(data_training['Pendidikan Ibu']=='SD') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak SD Pada Baik Data Training : ", banyak_sd_baik)
banyak_smp_baik = len(data_training[(data_training['Pendidikan Ibu']=='SMP') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak SMP Pada Baik Data Training : ", banyak_smp_baik)
banyak_sma_baik = len(data_training[(data_training['Pendidikan Ibu']=='SMA') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak SMA Pada Baik Data Training : ", banyak_sma_baik)
banyak_s1_baik = len(data_training[(data_training['Pendidikan Ibu']=='S1') & (data_training['Status Gizi'] == 'Baik')])
print("Banyak S1 Pada Baik Data Training : ", banyak_s1_baik)

#Probabilitas
prob_sd_buruk = banyak_sd_buruk/len(data_training_buruk)
prob_smp_buruk = banyak_smp_buruk/len(data_training_buruk)
prob_sma_buruk = banyak_sma_buruk/len(data_training_buruk)
prob_s1_buruk = banyak_s1_buruk/len(data_training_buruk)

prob_sd_baik = banyak_sd_baik/len(data_training_baik)
prob_smp_baik = banyak_smp_baik/len(data_training_baik)
prob_sma_baik = banyak_sma_baik/len(data_training_baik)
prob_s1_baik = banyak_s1_baik/len(data_training_baik)

print(f"Probabilitas SD Buruk: {prob_sd_buruk:.2f}")
print(f"Probabilitas SMP Buruk: {prob_smp_buruk:.2f}")
print(f"Probabilitas SMA Buruk: {prob_sma_buruk:.2f}")
print(f"Probabilitas S1 Buruk: {prob_s1_buruk:.2f}")
print(" ")

print(f"Probabilitas SD Baik: {prob_sd_baik:.2f}")
print(f"Probabilitas SMP Baik: {prob_smp_baik:.2f}")
print(f"Probabilitas SMA Baik: {prob_sma_baik:.2f}")
print(f"Probabilitas S1 Baik: {prob_s1_baik:.2f}")
print(" ")


data = {
    'Pendapatan Orang Tua': ['SD', 'SMP', 'SMA', "S1"],
    'Buruk': [banyak_sd_buruk, banyak_smp_buruk, banyak_sma_buruk, banyak_s1_buruk],
    'Baik': [banyak_sma_baik, banyak_smp_baik, banyak_sma_baik, banyak_s1_baik],
    'Prob Buruk': [prob_sd_buruk, prob_smp_buruk, prob_sma_buruk, prob_s1_buruk],
    'Prob Baik': [prob_sd_baik, prob_smp_baik, prob_sma_baik, prob_s1_baik]
}

pendidikanIbu = pd.DataFrame(data)
pendidikanIbu

"""## Prediksi"""

#Memprediksi nilai pada kolom kelas di data testing

data_testing_copy = data_testing.copy()
data_testing_copy

"""## Fungsi Naive Bayes"""

from prettytable import PrettyTable

# usia = df['Usia (Bulan)']
# jenisKelamin = df['Jenis Kelamin (JK)']
# beratBadan = df['Berat Badan (BB)']
# tinggiBadan = df['Tinggi Badan (TB)']
# pendapatanOrangTua = df['Pendapatan Orang Tua']
# pendidikanIbu = df['Pendidikan Ibu']
# statusGizi = df['Status Gizi']

def naive_bayes_prediction(usia, jenisKelamin, beratBadan, tinggiBadan, pendapatanOrangTua, pendidikanIbu):
    persentase_usia = {'Bayi dan Balita': {'Buruk': prob_bayiDanBalita_buruk, 'Baik': prob_bayiDanBalita_baik},
                            'Anak Pra-Sekolah': {'Buruk': prob_anakPraSekolah_buruk, 'Baik': prob_anakPraSekolah_baik}}

    persentase_jenisKelamin = {'L': {'Buruk': prob_l_buruk, 'Baik': prob_l_baik},
                            'P': {'Buruk': prob_p_buruk, 'Baik': prob_p_baik}}

    persentase_beratBadan = {'Ringan': {'Buruk': prob_ringan_buruk, 'Baik': prob_ringan_baik},
                            'Normal': {'Buruk': prob_normal_buruk, 'Baik': prob_normal_baik}}

    persentase_tinggiBadan = {'Pendek': {'Buruk': prob_pendek_buruk, 'Baik': prob_pendek_baik},
                            'Tinggi': {'Buruk': prob_tinggi_buruk, 'Baik': prob_tinggi_baik}}

    persentase_pendapatanOrangTua = { 'Satu' : {'Buruk': prob_1_buruk, 'Baik': prob_1_baik},
                            'Dua' : {'Buruk': prob_2_buruk, 'Baik': prob_2_baik},
                            'Tiga' : {'Buruk' : prob_3_buruk, 'Baik' : prob_3_baik}}

    persentase_pendidikanIbu = {'SD': {'Buruk': prob_sd_buruk, 'Baik': prob_sd_baik},
                            'SMP' : {'Buruk': prob_smp_buruk, 'Baik': prob_smp_baik},
                            'SMA' : {'Buruk': prob_sma_buruk, 'Baik': prob_sma_baik},
                            'S1' : {'Buruk': prob_s1_buruk, 'Baik': prob_s1_baik}}

    # Declare the variables outside of the if conditions
    pred_buruk = (
      prob_buruk *
      persentase_usia.get(usia, 0).get('Buruk', 0) *
      persentase_jenisKelamin.get(jenisKelamin, 0).get('Buruk', 0) *
      persentase_beratBadan.get(beratBadan, 0).get('Buruk', 0) *
      persentase_tinggiBadan.get(tinggiBadan, 0).get('Buruk', 0) *
      persentase_pendapatanOrangTua.get(pendapatanOrangTua, 0).get('Buruk', 0) *
      persentase_pendidikanIbu.get(pendidikanIbu, 0).get('Buruk', 0)
    )

    pred_baik = (
      prob_baik *
      persentase_usia.get(usia, 0).get('Baik', 0) *
      persentase_jenisKelamin.get(jenisKelamin, 0).get('Baik', 0) *
      persentase_beratBadan.get(beratBadan, 0).get('Baik', 0) *
      persentase_tinggiBadan.get(tinggiBadan, 0).get('Baik', 0) *
      persentase_pendapatanOrangTua.get(pendapatanOrangTua, 0).get('Baik', 0) *
      persentase_pendidikanIbu.get(pendidikanIbu, 0).get('Baik', 0)
    )

    # Create a table to display the results
    table = PrettyTable()
    table.field_names = ["Kelas", "Probabilitas"]
    table.add_row(["Buruk", pred_buruk])
    table.add_row(["Baik", pred_baik])

    print(table)

    prediksi = max(pred_buruk, pred_baik)

    if prediksi == pred_buruk:
        return 'Buruk', table
    else:
        return 'Baik', table

usia_input = input("Masukkan usia (Bayi dan Balita/Anak Pra-Sekolah): ")
jenis_kelamin_input = input("Masukkan jenis kelamin (L/P): ")
berat_badan_input = input("Masukkan berat badan (Ringan/Normal): ")
tinggi_badan_input = input("Masukkan tinggi badan (Pendek/Tinggi): ")
pendapatan_orang_tua_input = input("Masukkan pendapatan orang tua (Satu/Dua/Tiga): ")
pendidikan_ibu_input = input("Masukkan pendidikan ibu (SD/SMP/SMA/S1): ")

class_prediksi, result_table = naive_bayes_prediction(
    usia_input,
    jenis_kelamin_input,
    berat_badan_input,
    tinggi_badan_input,
    pendapatan_orang_tua_input,
    pendidikan_ibu_input
)

print("Prediksi Kelas: ", class_prediksi)